Selenium provides a comprehensive set of mouse actions that can be simulated using the `ActionChains` class in Python. Below, I will explain all the main mouse actions in Selenium and provide Python code examples for each of them.

Mouse Actions in Selenium

- Click: Clicks on an element.
- Double-click: Double-clicks on an element.
- Right-click (Context-click): Performs a right-click (context-click) on an element.
- Mouse Hover: Moves the mouse over an element (useful for triggering hover actions).
- Drag and Drop: Drags one element and drops it onto another.
- Click and Hold: Clicks and holds the mouse button on an element.
- Release: Releases the mouse button after a `click_and_hold`.
- Move to Element with Offset: Moves the mouse to an element with an additional offset.
- Scroll with Mouse Wheel: Scrolls the page using the keyboard keys or mouse wheel action.


Each of these actions can be used in combination to simulate real user interactions in a web browser. The key to using these actions effectively is chaining multiple actions together with the `ActionChains` class, and calling `perform()` to execute them.



1. Click
This action simulates a mouse click on an element.

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains

driver = webdriver.Chrome(executable_path='/path/to/chromedriver')  # Update path to chromedriver
driver.get('https://www.example.com')

click_element = driver.find_element(By.ID, 'clickElement')  # Replace with actual ID or selector
actions = ActionChains(driver)
actions.click(click_element).perform()

driver.quit()


2. Double-click
This action simulates a double-click (mouse left-click twice in rapid succession) on an element.

double_click_element = driver.find_element(By.ID, 'doubleClickElement')  # Replace with actual ID or selector
actions.double_click(double_click_element).perform()


3. Right-click (Context Click)
Right-clicking an element (usually to open a context menu).

right_click_element = driver.find_element(By.ID, 'rightClickElement')  # Replace with actual ID or selector
actions.context_click(right_click_element).perform()


4. Mouse Hover (Move to Element)
Simulates the mouse hovering over an element. This is useful for triggering hover effects or menus.

hover_element = driver.find_element(By.ID, 'hoverElement')  # Replace with actual ID or selector
actions.move_to_element(hover_element).perform()


5. Drag and Drop
Simulates dragging an element from one location and dropping it at another location.

drag_element = driver.find_element(By.ID, 'dragElement')  # Replace with actual ID or selector
drop_element = driver.find_element(By.ID, 'dropElement')  # Replace with actual ID or selector
actions.drag_and_drop(drag_element, drop_element).perform()


6. Click and Hold
This action simulates clicking and holding the mouse on an element. It can be useful for actions like dragging or selecting text.

click_and_hold_element = driver.find_element(By.ID, 'clickAndHoldElement')  # Replace with actual ID or selector
actions.click_and_hold(click_and_hold_element).perform()

# To release the click
actions.release().perform()


7. Release
This action releases the mouse button after a `click_and_hold`. It is usually paired with `click_and_hold`.

# Releasing after a drag-and-drop or click-and-hold action
actions.release().perform()


8. Move to Element with Offset
This action moves the mouse to a specific location relative to an element. You can specify the pixel offset.

move_to_element_with_offset = driver.find_element(By.ID, 'elementWithOffset')  # Replace with actual ID or selector
actions.move_to_element_with_offset(move_to_element_with_offset, 10, 20).perform()  # x=10, y=20 offset from element


9. Scroll with Mouse Wheel
You can scroll the page using the mouse wheel by using `send_keys` with special keys.

from selenium.webdriver.common.keys import Keys

# This example scrolls the page down
actions.send_keys(Keys.PAGE_DOWN).perform()

# Or use the mouse wheel by sending 'down' or 'up' keys
actions.send_keys(Keys.DOWN).perform()




Complete Python Example with All Mouse Actions:


from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

# Set up the webdriver (update the path to your chromedriver)
driver = webdriver.Chrome(executable_path='/path/to/chromedriver')
driver.get('https://www.example.com')  # Replace with your URL
driver.maximize_window()

actions = ActionChains(driver)

# 1. Click
click_element = driver.find_element(By.ID, 'clickElement')  # Replace with actual ID or selector
actions.click(click_element).perform()

# 2. Double-click
double_click_element = driver.find_element(By.ID, 'doubleClickElement')
actions.double_click(double_click_element).perform()

# 3. Right-click (Context click)
right_click_element = driver.find_element(By.ID, 'rightClickElement')
actions.context_click(right_click_element).perform()

# 4. Mouse Hover
hover_element = driver.find_element(By.ID, 'hoverElement')
actions.move_to_element(hover_element).perform()

# 5. Drag and Drop
drag_element = driver.find_element(By.ID, 'dragElement')
drop_element = driver.find_element(By.ID, 'dropElement')
actions.drag_and_drop(drag_element, drop_element).perform()

# 6. Click and Hold
click_and_hold_element = driver.find_element(By.ID, 'clickAndHoldElement')
actions.click_and_hold(click_and_hold_element).perform()
actions.release().perform()  # Release after hold

# 7. Move to Element with Offset
move_to_element_with_offset = driver.find_element(By.ID, 'elementWithOffset')
actions.move_to_element_with_offset(move_to_element_with_offset, 10, 20).perform()  # offset (10, 20)

# 8. Scroll with Mouse Wheel
actions.send_keys(Keys.PAGE_DOWN).perform()

# Close the browser
driver.quit()



